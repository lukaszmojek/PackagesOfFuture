/*
 * PackagesOfFuture.Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class PackagesApiController : ControllerBase
    { 
        /// <summary>
        /// Gets all packages
        /// </summary>
        /// <response code="200">When there are packages</response>
        /// <response code="404">If there are no packages</response>
        [HttpGet]
        [Route("/Packages")]
        [ValidateModelState]
        [SwaggerOperation("PackagesGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<PackageDto>), description: "When there are packages")]
        public virtual IActionResult PackagesGet()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<PackageDto>));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"deliveryAddressId\" : 2,\n  \"receiveAddressId\" : 4,\n  \"deliveryAddress\" : {\n    \"houseAndFlatNumber\" : \"houseAndFlatNumber\",\n    \"city\" : \"city\",\n    \"street\" : \"street\",\n    \"postalCode\" : \"postalCode\"\n  },\n  \"width\" : 6.027456183070403,\n  \"length\" : 5.962133916683182,\n  \"weight\" : 5.637376656633329,\n  \"payment\" : {\n    \"amount\" : 9.301444243932576,\n    \"id\" : 2,\n    \"type\" : 7,\n    \"status\" : 3\n  },\n  \"deliveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"status\" : 0,\n  \"height\" : 1.4658129805029452\n}, {\n  \"deliveryAddressId\" : 2,\n  \"receiveAddressId\" : 4,\n  \"deliveryAddress\" : {\n    \"houseAndFlatNumber\" : \"houseAndFlatNumber\",\n    \"city\" : \"city\",\n    \"street\" : \"street\",\n    \"postalCode\" : \"postalCode\"\n  },\n  \"width\" : 6.027456183070403,\n  \"length\" : 5.962133916683182,\n  \"weight\" : 5.637376656633329,\n  \"payment\" : {\n    \"amount\" : 9.301444243932576,\n    \"id\" : 2,\n    \"type\" : 7,\n    \"status\" : 3\n  },\n  \"deliveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"status\" : 0,\n  \"height\" : 1.4658129805029452\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<PackageDto>>(exampleJson)
                        : default(List<PackageDto>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Registers a new package
        /// </summary>
        /// <param name="body">Representation of package to register</param>
        /// <response code="200">Success</response>
        /// <response code="204">When package was registered</response>
        /// <response code="400">When error regarding input occurred</response>
        [HttpPost]
        [Route("/Packages")]
        [ValidateModelState]
        [SwaggerOperation("PackagesPost")]
        public virtual IActionResult PackagesPost([FromBody]RegisterPackageDto body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            throw new NotImplementedException();
        }
    }
}
