/*
 * PackagesOfFuture.Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class UsersApiController : ControllerBase
    { 
        /// <summary>
        /// Gets all users
        /// </summary>
        /// <response code="200">When there are users</response>
        /// <response code="404">If there are no users</response>
        [HttpGet]
        [Route("/Users")]
        [ValidateModelState]
        [SwaggerOperation("UsersGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<UserDto>), description: "When there are users")]
        public virtual IActionResult UsersGet()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<UserDto>));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"firstName\" : \"firstName\",\n  \"lastName\" : \"lastName\",\n  \"password\" : \"password\",\n  \"id\" : 0,\n  \"type\" : \"type\",\n  \"email\" : \"email\"\n}, {\n  \"firstName\" : \"firstName\",\n  \"lastName\" : \"lastName\",\n  \"password\" : \"password\",\n  \"id\" : 0,\n  \"type\" : \"type\",\n  \"email\" : \"email\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<UserDto>>(exampleJson)
                        : default(List<UserDto>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Changes user details
        /// </summary>
        /// <param name="id">Id of a user</param>
        /// <param name="body">Representation of user details to change</param>
        /// <response code="200">Success</response>
        /// <response code="204">When user details was changed</response>
        /// <response code="400">When error regarding input occurred</response>
        [HttpPost]
        [Route("/Users/{id}/change-details")]
        [ValidateModelState]
        [SwaggerOperation("UsersIdChangeDetailsPost")]
        public virtual IActionResult UsersIdChangeDetailsPost([FromRoute][Required]int? id, [FromBody]ChangeUserDetailsDto body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Changes user password
        /// </summary>
        /// <param name="id">Id of a user</param>
        /// <param name="body">Representation of user password to change</param>
        /// <response code="200">Success</response>
        /// <response code="204">When user password was changed</response>
        /// <response code="400">When error regarding input occurred</response>
        [HttpPost]
        [Route("/Users/{id}/change-password")]
        [ValidateModelState]
        [SwaggerOperation("UsersIdChangePasswordPost")]
        public virtual IActionResult UsersIdChangePasswordPost([FromRoute][Required]int? id, [FromBody]ChangeUserPasswordDto body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Changes user details
        /// </summary>
        /// <param name="id">Id of a user</param>
        /// <response code="200">Success</response>
        /// <response code="204">When user was unregistered</response>
        /// <response code="404">When no user with selected id exists</response>
        [HttpDelete]
        [Route("/Users/{id}/unregister")]
        [ValidateModelState]
        [SwaggerOperation("UsersIdUnregisterDelete")]
        public virtual IActionResult UsersIdUnregisterDelete([FromRoute][Required]int? id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Registers a new user
        /// </summary>
        /// <param name="body">Representation of user to register</param>
        /// <response code="200">Success</response>
        /// <response code="204">When user was registered</response>
        /// <response code="400">When error regarding input occurred</response>
        [HttpPost]
        [Route("/Users")]
        [ValidateModelState]
        [SwaggerOperation("UsersPost")]
        public virtual IActionResult UsersPost([FromBody]RegisterUserDto body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            throw new NotImplementedException();
        }
    }
}
